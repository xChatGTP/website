/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "DotRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DotRegistry__factory>;
    getContractFactory(
      name: "Dot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dot__factory>;
    getContractFactory(
      name: "BridgeGetters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeGetters__factory>;
    getContractFactory(
      name: "ITokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenBridge__factory>;
    getContractFactory(
      name: "IWormhole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormhole__factory>;
    getContractFactory(
      name: "PortalWrappedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PortalWrappedToken__factory>;
    getContractFactory(
      name: "IMockWormhole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMockWormhole__factory>;
    getContractFactory(
      name: "MockDotRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockDotRegistry__factory>;
    getContractFactory(
      name: "MockWormhole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWormhole__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "DotRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DotRegistry>;
    getContractAt(
      name: "Dot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Dot>;
    getContractAt(
      name: "BridgeGetters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeGetters>;
    getContractAt(
      name: "ITokenBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenBridge>;
    getContractAt(
      name: "IWormhole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormhole>;
    getContractAt(
      name: "PortalWrappedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PortalWrappedToken>;
    getContractAt(
      name: "IMockWormhole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMockWormhole>;
    getContractAt(
      name: "MockDotRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockDotRegistry>;
    getContractAt(
      name: "MockWormhole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWormhole>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
